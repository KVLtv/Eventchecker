local function Eventchecker(self, event, ...)
-- [[The table containing the payload [key] = "value" of Type generated by the events PLAYER_INTERACTION_MANAGER_FRAME_SHOW and PLAYER_INTERACTION_MANAGER_FRAME_HIDE.]]
local WhatType = {

	[0] = "None",
	[1] = "TradePartner",
	[2] = "Item",
	[3] = "Gossip",
	[4] = "QuestGiver",
	[5] = "Merchant",
	[6] = "TaxiNode",
	[7] = "Trainer",
	[8] = "Banker",
	[9] = "AlliedRaceDetailsGiver",
	[10] = "GuildBanker",
	[11] = "Registrar",
	[12] = "Vendor",
	[13] = "PetitionVendor",
	[14] = "TabardVendor",
	[15] = "TalentMaster",
	[16] = "SpecializationMaster",
	[17] = "MailInfo",
	[18] = "SpiritHealer",
	[19] = "AreaSpiritHealer",
	[20] = "Binder",
	[21] = "Auctioneer",
	[22] = "StableMaster",
	[23] = "BattleMaster",
	[24] = "Transmogrifier",
	[25] = "LFGDungeon",
	[26] = "VoidStorageBanker",
	[27] = "BlackMarketAuctioneer",
	[28] = "AdventureMap",
	[29] = "WorldMap",
	[30] = "GarrArchitect",
	[31] = "GarrTradeskill",
	[32] = "GarrMission",
	[33] = "ShipmentCrafter",
	[34] = "GarrRecruitment",
	[35] = "GarrTalent",
	[36] = "Trophy",
	[37] = "PlayerChoice",
	[38] = "ArtifactForge",
	[39] = "ObliterumForge",
	[40] = "ScrappingMachine",
	[41] = "ContributionCollector",
	[42] = "AzeriteRespec",
	[43] = "IslandQueue",
	[44] = "ItemInteraction",
	[45] = "ChromieTime",
	[46] = "CovenantPreview",
	[47] = "AnimaDiversion",
	[48] = "LegendaryCrafting",
	[49] = "WeeklyRewards",
	[50] = "Soulbind",
	[51] = "CovenantSanctum",
	[52] = "NewPlayerGuide",
	[53] = "ItemUpgrade",
	[54] = "AdventureJournal",
	[55] = "Renown",
	[56] = "AzeriteForge",
	[57] = "PerksProgramVendor",
	[58] = "ProfessionsCraftingOrder",
	[59] = "Professions",
	[60] = "ProfessionsCustomerOrder",
	[61] = "TraitSystem",
	[62] = "BarbersChoice",
	[63] = "JailersTowerBuffs",
	[64] = "MajorFactionRenown"

}
-- [[When active, the AddOn will be on the lookout for the events the PLAYER_INTERACTION_MANAGER_FRAME_SHOW and PLAYER_INTERACTION_MANAGER_FRAME_HIDE to fire.]]
	if ( event == "ADDON_LOADED" )
	then
	self:RegisterEvent("PLAYER_INTERACTION_MANAGER_FRAME_SHOW");
	self:RegisterEvent("PLAYER_INTERACTION_MANAGER_FRAME_HIDE");
	end

	if (event == "PLAYER_INTERACTION_MANAGER_FRAME_SHOW")
-- [["We got one!" Sorry, couldn't help the Ghostbuster reference.]]
	then
 -- [[PLAYER_INTERACTION_MANAGER_FRAME_SHOW has one payload: Type. Get the Type payload from "local function Eventchecker(self, event, ...)" where PLAYER_INTERACTION_MANAGER_FRAME_SHOW is the "event", and represent the Type payload with the word "checkevent".]]
		local checkevent = ...
		if checkevent then
 -- [[Assuming checkevent, the Type payload, is a string, this converts checkevent to a number]]
			local check = tonumber(checkevent)
 -- [[compares the number represented by check to the key elements in the table WhatType and advances only if there is a value]]
			if WhatType[check] ~= nil then
 -- [[the [key] = "value" in WhatType has key compared to data in check, which is the event Type payload, then prints "value"]]
				for key, value in pairs(WhatType) do
					if check == key then
					print("|cff00ff00Opening fired #|r".." "..(key).." ".."|cff00ff00=|r".." "..(value).." ".."|cff00ff00Player Interaction Type|r")
					end
				end
-- [[just in case that the Type payload returns something not on the WhatType list]]
			else
				if check then
					print("|cffff00ffOpening fired #|r".." "..(check).." ".."|cffff00ffPlayer Interaction Type and it's not on the list|r")
				end
			end
		end	
	elseif (event == "PLAYER_INTERACTION_MANAGER_FRAME_HIDE")
	then
-- [[just repeats the code above for "local function Eventchecker(self, event, ...)" where PLAYER_INTERACTION_MANAGER_FRAME_HIDE is the "event"]]
		local checkevent = ...
		if checkevent then
			local check = tonumber(checkevent)
			if WhatType[check] ~= nil then
				for key, value in pairs(WhatType) do
					if check == key then
					print("|cff00ff00Closing fired #|r".." "..(key).." ".."|cff00ff00=|r".." "..(value).." ".."|cff00ff00Player Interaction Type|r")
					end
				end
			else 
				if check then
					print("|cffff00ffClosinging fired #|r".." "..(check).." ".."|cffff00ffPlayer Interaction Type and it's not on the list|r")
				end
			end
		end
	end
end
-- Then put it all to work
local eventchecker_frame = CreateFrame("Frame")
eventchecker_frame:RegisterEvent("ADDON_LOADED")
eventchecker_frame:HookScript("OnEvent", Eventchecker)